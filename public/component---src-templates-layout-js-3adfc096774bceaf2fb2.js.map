{"version":3,"sources":["webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/header/header.js","webpack:///./src/components/footer/footer.js","webpack:///./src/components/faqs/faqs.js","webpack:///./src/templates/layout.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["loader","enqueue","React","createContext","Header","props","react_default","a","createElement","Fragment","heading","subheading","Footer","require","Faqs","data","_423802803","allFaqs","group","map","faqs","subheader","edges","faq","node","meta","with_html_default","source","content","__webpack_require__","d","__webpack_exports__","layout_query","renderAst","rehypeReact","components","Compiler","query","Layout","_ref","header","page","footer","m","module","exports","default","ProdPageRenderer","location","pageResources","InternalPageRenderer","Object","assign","json"],"mappings":"yJAcyBA,QAAOC,QAELC,IAAMC,cAAc,eCGhCC,EAfA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UACGH,EAAMK,SAETJ,EAAAC,EAAAC,cAAA,SACGH,EAAMM,eCFFC,EARA,WACb,OACEN,EAAAC,EAAAC,cAAA,oDCAJK,EAAQ,KAER,IA+CeC,EA/CF,WACX,IAAMC,EAAIC,EAAAD,KAiBV,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAEIM,EAAKE,QAAQC,MAAMC,IAAI,SAACC,GACtB,OACEd,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,UACGY,EAAKC,WAGND,EAAKE,MAAMH,IAAI,SAACI,GACd,OACEjB,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,eACGe,EAAIC,KAAKC,KAAKf,SAEfJ,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CAAeoB,OAAQJ,EAAIC,KAAKI,kBCxCxDC,EAAAC,EAAAC,EAAA,0BAAAC,IAOA,IAAMC,EAAY,IAAIC,IAAY,CAChC1B,cAAeN,IAAMM,cACrB2B,WAAY,CACVf,KAAQN,KAETsB,SAEUC,EAAK,aA0BHC,UAdA,SAAAC,GAAc,IAAXxB,EAAWwB,EAAXxB,KAChB,OACET,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAACgC,EAAD,CAAQ9B,QAASK,EAAK0B,KAAKhB,KAAKf,QAASC,WAAYI,EAAK0B,KAAKhB,KAAKd,aACpEL,EAAAC,EAAAC,cAAA,YAEIyB,EAAUlB,EAAK0B,KAAKb,UAGxBtB,EAAAC,EAAAC,cAACkC,EAAD,6BCnCN,IAAsBC,EAKpBC,EAAOC,SALaF,EAKW9B,EAAQ,OALR8B,EAAEG,SAAYH,8ECsBhCI,UAjBU,SAAAR,GAAiC,IAA9BS,EAA8BT,EAA9BS,SAAUC,EAAoBV,EAApBU,cACpC,OAAKA,EAGE/C,IAAMM,cAAc0C,IAApBC,OAAAC,OAAA,CACLJ,WACAC,iBACGA,EAAcI,OALV","file":"component---src-templates-layout-js-3adfc096774bceaf2fb2.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import React from 'react';\nimport { Link } from 'gatsby';\nimport headerStyles from './header.module.scss';\n\nconst Header = (props) => {\n  return (\n    <>\n      <header>\n        <h1>\n          {props.heading}\n        </h1>\n        <p>\n          {props.subheading}\n        </p>\n      </header>\n    </>\n  );\n};\n\nexport default Header;","import React from 'react';\n\nconst Footer = () => {\n  return (\n    <footer>\n      Footer\n    </footer>\n  );\n};\n\nexport default Footer;","import React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport ReactMarkdown from 'react-markdown/with-html';\n\nrequire('details-polyfill');\n\nconst Faqs = () => {\n  const data = useStaticQuery(graphql`\n    query {\n      allFaqs: allMarkdownRemark {\n        group(field: frontmatter___category) {\n          subheader: fieldValue\n          edges {\n            node {\n              meta: frontmatter {\n                heading\n              }\n              content: rawMarkdownBody\n            }\n          }\n        }\n      }\n    }\n  `);\n  return (\n    <>\n      {\n        data.allFaqs.group.map((faqs) => {\n          return (\n            <section>\n              <h2>\n                {faqs.subheader}\n              </h2>\n              {\n                faqs.edges.map((faq) => {\n                  return (\n                    <details>\n                      <summary>\n                        {faq.node.meta.heading}\n                      </summary>\n                        <ReactMarkdown source={faq.node.content}/>\n                    </details>\n                  );\n                })\n              }\n            </section>\n          );\n        })\n      }\n    </>\n  );\n};\n\nexport default Faqs;","import React from 'react';\nimport { graphql } from 'gatsby';\nimport rehypeReact from 'rehype-react';\nimport Header from '../components/header/header';\nimport Footer from '../components/footer/footer';\nimport Faqs from '../components/faqs/faqs';\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: {\n    'faqs': Faqs\n  }\n}).Compiler\n\nexport const query = graphql`\n  query($slug: String!) {\n    page: markdownRemark(frontmatter: {slug: {eq: $slug}}) {\n      meta: frontmatter {\n        heading\n        subheading\n      }\n      content: htmlAst\n    }\n  }\n`;\n\nconst Layout = ({ data }) => {\n  return (\n    <>\n      <Header heading={data.page.meta.heading} subheading={data.page.meta.subheading}/>\n      <main>\n        {\n          renderAst(data.page.content)\n        }\n      </main>\n      <Footer/>\n    </>\n  );\n};\n\nexport default Layout;","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}